/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "PPM.h"
#include "OnsetTrigger.h"
#include "DspFilters/Dsp.h"

//==============================================================================
/**
*/
class DrumReplacerAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    DrumReplacerAudioProcessor();
    ~DrumReplacerAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

	void setSamplerSound(int clipNum, AudioFormatReader *source);

	void playClip(int clipNum);

	void setThruGain(float gain);

	void setClipGain(float gain, int clipNum);

	AudioSampleBuffer * getClipBuffer(int clipNum);

	void setThresh(float t);

	void setRecovery(float r);

	float getCurMaxPPM(int c);

	void resetCurMaxPPM();

	bool isChecked();

	bool isTriggered();

	void setTriggered(bool trig);

	void setHPF(float freq);

	void setLPF(float freq);




private:
	Synthesiser synth;

	SamplerSound * clip1;

	CPPM * PPMDisplay;
	CPPM * PPMTrigger;

	COnsetTrigger * OnsetTrigger;

	AudioSampleBuffer scratchBuffer;
	AudioSampleBuffer scratchBuffer2;

	Dsp::Filter * dspLpf;
	Dsp::Params lpfParams;

	Dsp::Filter * dspHpf;
	Dsp::Params hpfParams;

	float * pcurPPM;
	float * pcurMaxPPM;

	float thresh;
	float recovery;

	float clip1Gain;

	float thruGain;

	float hpFreq, lpFreq;

	float iSampleRate;

	bool triggered;

	bool checked;

	void initialiseSynth();
	
	//==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (DrumReplacerAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
