/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
DrumReplacerAudioProcessorEditor::DrumReplacerAudioProcessorEditor(DrumReplacerAudioProcessor& p)
	: AudioProcessorEditor(&p), processor(p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.

	setSize(610, 400);

	processor.addChangeListener(this);

	startTimer(10);

	formatManager.registerBasicFormats();

	setLookAndFeel(&lookAndFeel);

	waveLen = processor.getTriggerBufferLength();

	//Waveforms
	waveform1.clearWaveformBuffer();
	addAndMakeVisible(waveform1);

	triggerWave.clearWaveformBuffer();
	addAndMakeVisible(triggerWave);

	//Buttons
	addAndMakeVisible(&openButton);
	openButton.setButtonText("Load Clip");
	openButton.addListener(this);

	addAndMakeVisible(&playButton);
	playButton.setButtonText("Play");
	playButton.addListener(this);
	playButton.setColour(TextButton::buttonColourId, Colours::green);
	playButton.setEnabled(false);

	//Toggle Buttons
	filterButton.setButtonText("Monitor Sidechain");
	filterButton.setToggleState(false, true);
	addAndMakeVisible(filterButton);
	filterButton.addListener(this);

	phaseButton.setEnabled(false);
	phaseButton.setButtonText("Invert Phase");
	phaseButton.setToggleState(false, true);
	addAndMakeVisible(phaseButton);
	phaseButton.addListener(this);

	//Sliders
	gain1.setRange(0.0, 1.0, 0.001);
	gain1.setValue(0.75);
	gain1.addListener(this);
	gain1.setSliderStyle(Slider::LinearVertical);
	gain1.setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
	addAndMakeVisible(&gain1);

	gainThru.setRange(0.0, 1.0, 0.001);
	gainThru.setValue(0.75);
	gainThru.addListener(this);
	gainThru.setSliderStyle(Slider::LinearVertical);
	gainThru.setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
	addAndMakeVisible(&gainThru);

	threshSlider.setSliderStyle(Slider::LinearBarVertical);
	threshSlider.setRange(-12.0, 0, 0.1);
	threshSlider.setValue(-6.0);
	threshSlider.addListener(this);
	threshSlider.setTextValueSuffix(" dB");
	addAndMakeVisible(&threshSlider);

	zoomSlider.setTextBoxStyle(Slider::NoTextBox, true, 0, 0);
	zoomSlider.setRange(0.001, 1.0);
	zoomSlider.setValue(1.0);
	zoomSlider.addListener(this);
	addAndMakeVisible(&zoomSlider);

	offsetSlider.setRange(-50, 50);
	offsetSlider.setValue(0);
	offsetSlider.setDoubleClickReturnValue(true, 0);
	offsetSlider.addListener(this);
	offsetSlider.setTextBoxStyle(Slider::TextBoxBelow, true, 100, 20);
	offsetSlider.setTextValueSuffix("ms");
	offsetSlider.setEnabled(false);
	addAndMakeVisible(&offsetSlider);

	//Knobs
	HPF.setSliderStyle(Slider::Rotary);
	HPF.setRange(10, 22000, 1);
	HPF.setSkewFactorFromMidPoint(1000);
	HPF.setValue(10);
	HPF.addListener(this);
	HPF.setTextBoxStyle(Slider::TextBoxBelow, false, 100, 20);
	HPF.setTextValueSuffix("Hz");
	addAndMakeVisible(&HPF);

	LPF.setSliderStyle(Slider::Rotary);
	LPF.setRange(10, 22000, 1);
	LPF.setSkewFactorFromMidPoint(1000);
	LPF.setValue(22000);
	LPF.addListener(this);
	LPF.setTextBoxStyle(Slider::TextBoxBelow, false, 100, 20);
	LPF.setTextValueSuffix("Hz");
	addAndMakeVisible(&LPF);

	recoverySlider.setSliderStyle(Slider::Rotary);
	recoverySlider.setRange(.001, 1.0, .001);
	recoverySlider.setValue(.5);
	recoverySlider.addListener(this);
	recoverySlider.setTextBoxStyle(Slider::TextBoxBelow, false, 100, 20);
	recoverySlider.setTextValueSuffix("ms");
	addAndMakeVisible(&recoverySlider);

	//Meters
	meterL.setName("ppmL");
	addAndMakeVisible(meterL);

	meterR.setName("ppmR");
	addAndMakeVisible(meterR);

	//Labels
	retrigLabel.setText("Retrigger", NotificationType::dontSendNotification);
	retrigLabel.setJustificationType(Justification::centred);
	addAndMakeVisible(retrigLabel);

	zoomLabel.setText("Zoom", NotificationType::dontSendNotification);
	zoomLabel.setJustificationType(Justification::centred);
	addAndMakeVisible(zoomLabel);

	gainlabel1.setText("Gain", NotificationType::dontSendNotification);
	gainlabel1.setJustificationType(Justification::centred);
	addAndMakeVisible(gainlabel1);

	gainlabel2.setText("Gain", NotificationType::dontSendNotification);
	gainlabel2.setJustificationType(Justification::centred);
	addAndMakeVisible(gainlabel2);

	offsetLabel.setText("Offset", NotificationType::dontSendNotification);
	offsetLabel.setJustificationType(Justification::centred);
	addAndMakeVisible(offsetLabel);

	filterLabel1.setText("HP", NotificationType::dontSendNotification);
	filterLabel1.setJustificationType(Justification::centred);
	addAndMakeVisible(filterLabel1);
	
	filterLabel2.setText("LP", NotificationType::dontSendNotification);
	filterLabel2.setJustificationType(Justification::centred);
	addAndMakeVisible(filterLabel2);
}

DrumReplacerAudioProcessorEditor::~DrumReplacerAudioProcessorEditor()
{

}

//==============================================================================
void DrumReplacerAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

	bg = ImageCache::getFromFile(File("C:/Users/Gregory/Desktop/School/PluginDev/DrumReplacer/drbg.jpg"));
	g.drawImage(bg, 0, 0, getWidth(), getHeight(), 0, 0, bg.getWidth(), bg.getHeight(), false);
}

void DrumReplacerAudioProcessorEditor::resized()
{
	openButton.setBounds(10, 10, 80, 20);
	playButton.setBounds(10, 40, 80, 20);

	retrigLabel.setBounds(5, 65, 80, 20);
	recoverySlider.setBounds(10, 85, 80, 50);

	waveform1.setBounds(100, 10, 300, 125);

	triggerWave.setBounds(100, 150, 300, 125);

	threshSlider.setBounds(10, 150, 40, 125);
	meterL.setBounds(50, 150, 20, 125);
	meterR.setBounds(70, 150, 20, 125);

	zoomLabel.setBounds(100, 285, 50, 20);
	zoomSlider.setBounds(150, 285, 250, 20);

	gain1.setBounds(410, 30, 40, 105);
	gainlabel1.setBounds(410, 10, 40, 20);

	gainThru.setBounds(410, 170, 40, 105);
	gainlabel2.setBounds(410, 150, 40, 20);

	phaseButton.setBounds(460, 15, 140, 30);
	offsetSlider.setBounds(460, 60, 140, 50);
	offsetLabel.setBounds(460, 40, 140, 20);

	filterButton.setBounds(460, 155, 140, 30);

	filterLabel1.setBounds(470, 200, 50, 20);
	HPF.setBounds(470, 220, 50, 50);

	filterLabel2.setBounds(530, 200, 50, 20);
	LPF.setBounds(530, 220, 50, 50);

	/*

	HPF.setBounds(10, 150, 50, 50);
	LPF.setBounds(10, 210, 50, 50);


	*/
}

void DrumReplacerAudioProcessorEditor::buttonClicked(Button * button)
{
	if (button == &openButton)      openButtonClicked();
	if (button == &playButton)      playButtonClicked();
	if (button == &filterButton) {
		processor.setFilterMon(button->getToggleState());
	}
	if (button == &phaseButton) {
		bool ph = button->getToggleState();
		processor.setPhase(ph);

		AudioSampleBuffer * clipBuff = processor.getClipBuffer(1);

		clipBuff->applyGain(-1.0);
				
		waveform1.clearWaveformBuffer();

		waveLen = clipBuff->getNumSamples();

		waveform1.updateBuffer(*clipBuff, waveLen);

		processor.setTriggerBufferLength(waveLen);
	}
}

void DrumReplacerAudioProcessorEditor::sliderValueChanged(Slider* s) {
	if (s == &gainThru) {
		processor.setThruGain((float)gainThru.getValue());
	}
	if (s == &gain1) {
		processor.setClipGain((float)gain1.getValue(), 1);
	}
	if (s == &threshSlider) {
		processor.setThresh((float)threshSlider.getValue());
	}
	if (s == &recoverySlider) {
		processor.setRecovery((float)recoverySlider.getValue());
	}
	if (s == &HPF) {
		processor.setHPF((float)HPF.getValue());
	}
	if (s == &LPF) {
		processor.setLPF((float)LPF.getValue());
	}
	if (s == &zoomSlider) {
		zoom = zoomSlider.getValue();
		waveform1.setZoom(zoom);
		triggerWave.setZoom(zoom);
	}
	if (s == &offsetSlider) {
		processor.setOffset((int)(offsetSlider.getValue()));

		int offset = (int)(offsetSlider.getValue() * processor.getSampleRate() / 1000);

		AudioSampleBuffer * clipBuff = processor.getClipBuffer(1);
		float samp = 0.0;
		clipBuff->applyGain(0);
		for (int channel = 0; channel < clipBuff->getNumChannels(); ++channel)
		{
			for (int i = 0; i < clipBuff->getNumSamples(); i++) {

				samp = clipBufferOrig.getSample(channel, i);
				if (((i + offset) > 0) && ((i + offset) < clipBuff->getNumSamples())) {
					clipBuff->setSample(channel, i + offset, samp);
				}
			}
		}

		waveform1.clearWaveformBuffer();

		waveLen = clipBuff->getNumSamples();

		waveform1.updateBuffer(*clipBuff, waveLen);

		processor.setTriggerBufferLength(waveLen);
	}
}


//OPEN FILE
void DrumReplacerAudioProcessorEditor::openButtonClicked()
{
	FileChooser chooser("Select a Wave file...",
		File::nonexistent,
		"*.wav");

	if (chooser.browseForFileToOpen())
	{
		File file(chooser.getResult());
		AudioFormatReader* reader = formatManager.createReaderFor(file);

		if (reader != nullptr)
		{
			playButton.setEnabled(true);
			processor.setSamplerSound(reader);
			AudioSampleBuffer * clipBuff = processor.getClipBuffer(1);
			clipBufferOrig.makeCopyOf(*clipBuff);

			waveform1.clearWaveformBuffer();

			waveLen = clipBuff->getNumSamples();

			waveform1.updateBuffer(*clipBuff, waveLen);

			processor.setTriggerBufferLength(waveLen);

			offsetSlider.setValue(0);
			phaseButton.setToggleState(false, true);
			phaseButton.setEnabled(true);
			offsetSlider.setEnabled(true);

			AudioSampleBuffer * waveBuff = processor.getTriggerBuffer();
			triggerWave.clearWaveformBuffer();
			triggerWave.updateBuffer(*waveBuff, waveLen);
		}
		reader->~AudioFormatReader();
	}
}

void DrumReplacerAudioProcessorEditor::playButtonClicked()
{
	processor.playClip(1);
}

void DrumReplacerAudioProcessorEditor::timerCallback() {
	meterL.setValue(processor.getCurMaxPPM(0));
	meterR.setValue(processor.getCurMaxPPM(1));
	if (processor.isChecked()) {
		processor.resetCurMaxPPM();
	}
	
}

void DrumReplacerAudioProcessorEditor::changeListenerCallback(ChangeBroadcaster *source) {
	AudioSampleBuffer * waveBuff = processor.getTriggerBuffer();
	triggerWave.clearWaveformBuffer();
	triggerWave.updateBuffer(*waveBuff, waveLen);
}

