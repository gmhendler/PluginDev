/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"



//==============================================================================
JuceVibAudioProcessorEditor::JuceVibAudioProcessorEditor (JuceVibAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{

	startTimer(10);
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (300, 200);

	// sliders 
	fSlider.setSliderStyle(Slider::LinearBarVertical);
	fSlider.setRange(0.0, p.maxFreq);
	fSlider.setTextValueSuffix(" Hz");
	fSlider.setValue(2);
	fSlider.addListener(this);
	addAndMakeVisible(&fSlider);

	dSlider.setSliderStyle(Slider::LinearBarVertical);
	dSlider.setRange(0.0, p.maxDelay);
	dSlider.setValue(0.02);
	dSlider.addListener(this);
	addAndMakeVisible(&dSlider);

	// button
	bypassButton.setToggleState(false,true);
	addAndMakeVisible(bypassButton);
	bypassButton.addListener(this);

	//meter
	meter.setName("ppm");
	addAndMakeVisible(meter);
}

JuceVibAudioProcessorEditor::~JuceVibAudioProcessorEditor()
{
}

//==============================================================================
void JuceVibAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText("Vibrato", 0, 0, getWidth(), 30, Justification::centred, 1);
}

void JuceVibAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
	fSlider.setBounds(40, 30, 40, getHeight() - 60);
	dSlider.setBounds(100, 30, 40, getHeight() - 60);
	bypassButton.setBounds(160, 30, 30, 30);
	meter.setBounds(220, 30, 40, getHeight() - 60);
}


void JuceVibAudioProcessorEditor::buttonClicked(Button* b) {
	processor.bypassed = bypassButton.getToggleState();
}

void JuceVibAudioProcessorEditor::sliderValueChanged(Slider* s) {
	if (s == &fSlider) {
		float temp = (float)fSlider.getValue();
		processor.setFreq((float)fSlider.getValue());
	}
	else if (s == &dSlider) {
		processor.setDepth((float)dSlider.getValue());
	}
}

void JuceVibAudioProcessorEditor::timerCallback() {
	meter.setValue(processor.getCurMaxPPM());
	if (processor.checked) {
		processor.resetCurMaxPPM();
	}
}