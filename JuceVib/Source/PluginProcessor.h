/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"

#include "Vibrato.h"
#include "PPM.h"


//==============================================================================
/**
*/
class JuceVibAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    JuceVibAudioProcessor();
    ~JuceVibAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;
	void processBlockBypassed (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

	void setFreq(float f);

	void setDepth(float d);

	float getCurMaxPPM();

	void resetCurMaxPPM();

	float lfoFreq;
	float lfoAmp;

	float maxFreq;

	bool bypassed;

	float maxDelay;

	float curPPM;

	float curMaxPPM;

private:
	CVibrato *Vibe;
	CPPM *PPM;
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (JuceVibAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED